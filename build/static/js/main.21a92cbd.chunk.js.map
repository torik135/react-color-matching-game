{"version":3,"sources":["components/ScoreBoard.js","img/blue.png","img/green.png","img/orange.png","img/purple.png","img/red.png","img/yellow.png","img/blank.png","App.js","index.js"],"names":["ScoreBoard","score","className","candyColors","Blue","Green","Orange","Purple","Red","Yellow","App","useState","currColorArr","setCurrColorArr","boxBeingDragged","setBoxBeingDragged","boxBeingReplaced","setBoxBeingReplaced","scoreDisplay","setScoreDisplay","checkColumn3","i","column3","width","decidedColor","isBlank","Blank","every","box","forEach","checkColumn4","column4","checkRow3","row4","includes","checkRow4","moveBoxBelow","randomNum","Math","floor","random","length","dragStart","e","target","dragDrop","dragEnd","boxBeingReplacedId","parseInt","getAttribute","boxBeingDraggedId","validMove","isColumn4","isRow4","isColumn3","isRow3","console","log","useEffect","randomColorArrangement","randomNumber0toN","randomColor","push","createBoard","timer","setInterval","clearInterval","map","candyColor","index","src","data-id","alt","draggable","onDragStart","onDrop","onDragEnd","onDragOver","preventDefault","onDragEnter","onDragLeave","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.21a92cbd.chunk.js","sourcesContent":["import React from 'react'\n\nconst ScoreBoard = ({ score }) => {\n    return (\n        <div className='score-board'>\n            <h2>\n                Score: {score}\n            </h2>\n        </div>\n    )\n}\n\nexport default ScoreBoard\n","export default __webpack_public_path__ + \"static/media/blue.9411ba7f.png\";","export default __webpack_public_path__ + \"static/media/green.409247b6.png\";","export default __webpack_public_path__ + \"static/media/orange.d5ec4982.png\";","export default __webpack_public_path__ + \"static/media/purple.a83e5249.png\";","export default __webpack_public_path__ + \"static/media/red.13f01b50.png\";","export default __webpack_public_path__ + \"static/media/yellow.0dffadf7.png\";","export default __webpack_public_path__ + \"static/media/blank.9833fa08.png\";","import { useState, useEffect } from 'react'\n\n// components\nimport ScoreBoard from './components/ScoreBoard'\n\n// images\nimport Blue from './img/blue.png'\nimport Green from './img/green.png'\nimport Orange from './img/orange.png'\nimport Purple from './img/purple.png'\nimport Red from './img/red.png'\nimport Yellow from './img/yellow.png'\nimport Blank from './img/blank.png'\n\nconst width = 8\nconst candyColors = [\n  Blue,\n  Green,\n  Orange,\n  Purple,\n  Red,\n  Yellow,\n]\n\n\nconst App = () => {\n  // setting the current color arrangement with set current color arrangement\n  const [currColorArr, setCurrColorArr] = useState([])\n\n  const [boxBeingDragged, setBoxBeingDragged] = useState(null)\n  const [boxBeingReplaced, setBoxBeingReplaced] = useState()\n\n  const [scoreDisplay, setScoreDisplay] = useState(0)\n\n  // checking of column 4 and 3\n  const checkColumn3 = () => {\n    // 47 = index of the column of 3 that get check\n    // after index number 47 the column is 2 not 3 anymore\n    for (let i = 0; i <= 47; i++) {\n      // i = 0\n      // i + width(8) = 8\n      // i + width(8) * 2 = 16\n      // so it make 3 items verticaly\n      // and the value of i will keep changing based on the index / box that we choose\n      const column3 = [i, i + width, i + width * 2]\n\n      // getting the first value of the column\n      const decidedColor = currColorArr[i]\n\n      // check if the box is blank\n      const isBlank = currColorArr[i] === Blank\n\n      // match checking\n      // if every box if match with decidedColor(first color) then\n      // replace it with blank box\n      if (column3.every(box => currColorArr[box] === decidedColor && !isBlank)) {\n        setScoreDisplay((score) => score + 3)\n        column3.forEach(box => { currColorArr[box] = Blank })\n        return true\n      }\n    }\n  }\n\n  const checkColumn4 = () => {\n    // 39 = index of the column of 3 that get check\n    // after index number 47 the column is 3 not 4 anymore\n    for (let i = 0; i <= 39; i++) {\n      // i = 0\n      // i + width(8) = 8\n      // i + width(8) * 2 = 16\n      // i + width(8) * 3 = 24\n      // so it make 4 items verticaly\n      // and the value of i will keep changing based on the index / box that we choose\n      const column4 = [i, i + width, i + width * 2, i + width * 3]\n\n      // getting the first value of the column\n      const decidedColor = currColorArr[i]\n\n      // check if the box is blank\n      const isBlank = currColorArr[i] === Blank\n\n      // match checking\n      // if every box if match with decidedColor(first color) then\n      // replace it with blank box\n      if (column4.every(box => currColorArr[box] === decidedColor && !isBlank)) {\n        setScoreDisplay((score) => score + 4)\n        column4.forEach(box => { currColorArr[box] = Blank })\n        return true\n      }\n    }\n  }\n\n  // checking of row 4 and 3\n  const checkRow3 = () => {\n    // 64 = index of the row of 3 that get check\n    // after index number 64 the row is 2 not 3 anymore\n    for (let i = 0; i < 64; i++) {\n      // i = 0\n      // i + 1\n      // i + 2\n      // so it make 3 items horizontaly\n      // and the value of i will keep changing based on the index / box that we choose\n      const row4 = [i, i + 1, i + 2]\n\n      // getting the first value of the column\n      const decidedColor = currColorArr[i]\n\n      // check if the box is blank\n      const isBlank = currColorArr[i] === Blank\n\n      // no valid box / index\n      // this box / index will not be check because is 2 not 3 anymore\n      const notValidBox = [\n        6, 7,\n        14, 15,\n        22, 23,\n        30, 31,\n        38, 39,\n        46, 47,\n        54, 55,\n        63, 64\n      ]\n\n      // if value of i is matching the value of notValidBox then\n      // continue the code\n      if (notValidBox.includes(i)) continue\n\n      // match checking\n      // if every box if match with decidedColor(first color) then\n      // replace it with blank box\n      if (row4.every(box => currColorArr[box] === decidedColor && !isBlank)) {\n        setScoreDisplay((score) => score + 3)\n        row4.forEach(box => { currColorArr[box] = Blank })\n        return true\n      }\n    }\n  }\n\n  const checkRow4 = () => {\n    // 39 = index of the column of 3 that get check\n    // after index number 64 the column is 2 not 3 anymore\n    for (let i = 0; i < 64; i++) {\n      // i = 0\n      // i + 1\n      // i + 2\n      // i + 3\n      // so it make 4 item horizontaly\n      // and the value of i will keep changing based on the index / box that we choose\n      const row4 = [i, i + 1, i + 2, i + 3]\n\n      // getting the first value of the column\n      const decidedColor = currColorArr[i]\n\n      // check if the box is blank\n      const isBlank = currColorArr[i] === Blank\n\n      // no valid box / index\n      // this box / index will not be check because is 3 not 4 anymore\n      const notValidBox = [\n        5, 6, 7,\n        13, 14, 15,\n        21, 22, 23,\n        29, 30, 31,\n        37,38, 39,\n        45, 46, 47,\n        53, 54, 55,\n        62, 63, 64\n      ]\n\n      // if value of i is matching the value of notValidBox then\n      // continue the code\n      if (notValidBox.includes(i)) continue\n\n      // match checking\n      // if every box if match with decidedColor(first color) then\n      // replace it with blank box\n      if (row4.every(box => currColorArr[box] === decidedColor && !isBlank)) {\n        setScoreDisplay((score) => score + 4)\n        row4.forEach(box => { currColorArr[box] = Blank })\n        return true\n      }\n    }\n  }\n\n  // TODO: check row and column 3 and 4\n  // run 2 dependencies useEffect\n\n  // move and replace the box\n  const moveBoxBelow = () => {\n    // looping the box before 55\n    // after 55 will be the bottom box\n    for (let i = 0; i <= 55; i++) {\n      // top box\n      const topBox = [0, 1, 2, 3, 4, 5, 6, 7]\n      // \n      const isTopBox = topBox.includes(i)\n\n      // if topbox is blank\n      if (isTopBox && currColorArr[i] === Blank) {\n        // fillin blank box with random color\n        const randomNum = Math.floor(Math.random() * candyColors.length)\n        currColorArr[i] = candyColors[randomNum]\n\n      }\n\n      // if the box below is empty\n      // then move it down to the blank box\n      if ((currColorArr[i + width]) === Blank) {\n        // replace blank box with colored box above it\n        // move blank up\n        currColorArr[i + width] = currColorArr[i]\n        // replace the colored box with blank box below it\n        // move color down\n        currColorArr[i] = Blank\n      }\n    }\n  }\n\n\n  const dragStart = (e) => {\n    // console.log('dragStart', e.target)\n    // get the data of the box being dragged\n    setBoxBeingDragged(e.target)\n  }\n  const dragDrop = (e) => {\n    // console.log('dragDrop', e.target)\n    // get the data of the box being replaced\n    setBoxBeingReplaced(e.target)\n  }\n  const dragEnd = (e) => {\n    // console.log('dragEnd', e.target)\n\n\n    // get the data-id (int) of the box being replace on drag end\n    const boxBeingReplacedId = parseInt(boxBeingReplaced.getAttribute('data-id'))\n    // get the data-id (int) of the box being dragged on drag end\n    const boxBeingDraggedId = parseInt(boxBeingDragged.getAttribute('data-id'))\n\n    // replace the box color\n    // replaceBox with draggedBox\n    currColorArr[boxBeingReplacedId] = boxBeingDragged.getAttribute('src')\n    // draggedBox with replaceBox\n    currColorArr[boxBeingDraggedId] = boxBeingReplaced.getAttribute('src')\n\n    // valid box moves\n    // return number\n    const validMoves = [\n      // move left 1\n      boxBeingDraggedId - 1,\n      // move up 1\n      boxBeingDraggedId - width,\n      // move right 1\n      boxBeingDraggedId + 1,\n      // move down 1\n      boxBeingDraggedId + width,\n    ]\n\n    // check if the move is valid\n    // if the boxReplaceId(number) is inside validMoves the is valid move\n    const validMove = validMoves.includes(boxBeingReplacedId)\n\n    const isColumn4 = checkColumn4()\n    const isRow4 = checkRow4()\n    const isColumn3 = checkColumn3()\n    const isRow3 = checkRow3()\n\n    // if true then set box color is replace with the dragged\n    // else is not replace\n    if (boxBeingDraggedId &&\n      validMove &&\n      (isColumn4 || isRow4 || isColumn3 || isRow3)) {\n      setBoxBeingDragged(null)\n      setBoxBeingReplaced(null)\n      console.log('POINT')\n    } else {\n      currColorArr[boxBeingReplacedId] = boxBeingReplaced.getAttribute('src')\n      currColorArr[boxBeingDraggedId] = boxBeingDragged.getAttribute('src')\n      setCurrColorArr([...currColorArr])\n      console.log(\"NOT POINT\")\n    }\n  }\n\n  // create an array 64 item (8*8)\n  const createBoard = () => {\n    // make an empty list for randomColor to fillin\n    const randomColorArrangement = []\n\n    // board size = width(8) * width(8)\n    for (let i = 0; i < width * width; i++) {\n\n      // random color from 0 to candyColor length = 6 or 0 - 5\n      const randomNumber0toN = Math.floor(Math.random() * candyColors.length)\n\n      // get random color from the candyColor based on the randomNumber0ToN\n      const randomColor = candyColors[randomNumber0toN]\n\n      randomColorArrangement.push(randomColor)\n    }\n\n    // set the current color arrangement with random color arrangement\n    setCurrColorArr(randomColorArrangement)\n  }\n\n  // use the useEffect function and use empty array without depedency so the board only run / render one time\n  useEffect(() => {\n    createBoard()\n  }, []) // with empty array so it only run once\n\n\n  // render the box with checkColumns3 rule\n  useEffect(() => {\n    // the box color will change every 100 miliseconds\n    const timer = setInterval(() => {\n      checkColumn4()\n      checkColumn3()\n      checkRow4()\n      checkRow3()\n      moveBoxBelow()\n      // set the current color arrangement with the new color arrangement\n      setCurrColorArr([...currColorArr])\n    }, 100)\n\n    return () => clearInterval(timer)\n  }, [\n    checkColumn4, checkRow4,\n    checkColumn3, checkRow3,\n    moveBoxBelow,\n    currColorArr])\n\n  return (\n    <>\n      <ScoreBoard score={scoreDisplay} />\n      <div className=\"app\">\n        <div className=\"game\">\n          {/* mapping the current color arrangement array to img tag\n      candyColor = value\n      index = index of the value */}\n          {currColorArr.map((candyColor, index) => (\n\n            <img\n              key={index}\n              src={candyColor}\n              data-id={index}\n              alt={candyColor}\n              draggable={true}\n              onDragStart={dragStart}\n              onDrop={dragDrop}\n              onDragEnd={dragEnd}\n              onDragOver={(e) => e.preventDefault()}\n              onDragEnter={(e) => e.preventDefault()}\n              onDragLeave={(e) => e.preventDefault()}\n            />\n          ))}\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}